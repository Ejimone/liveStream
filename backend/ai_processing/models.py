from django.db import models
from classroom_integration.models import AssignmentMaterial, Assignment

class Document(models.Model):
    """
    Represents a processed document from an AssignmentMaterial.
    Contains extracted text content and metadata.
    """
    material = models.OneToOneField(AssignmentMaterial, on_delete=models.CASCADE, related_name='document')
    raw_text = models.TextField()  # Full extracted text content
    processed_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    language = models.CharField(max_length=10, null=True, blank=True)  # Document language code (e.g., 'en')
    page_count = models.PositiveIntegerField(default=0)  # Number of pages in the original document
    
    def __str__(self):
        return f"Document for {self.material.title}"

class Chunk(models.Model):
    """
    Represents a smaller unit of a document (paragraph, section)
    with its embedding vector for similarity search.
    """
    document = models.ForeignKey(Document, on_delete=models.CASCADE, related_name='chunks')
    text = models.TextField()  # Chunk text content
    embedding_vector = models.BinaryField(null=True, blank=True)  # Store FAISS/vector embedding as binary
    chunk_index = models.PositiveIntegerField()  # Position in the document
    metadata = models.JSONField(default=dict, blank=True)  # Additional metadata (page number, section, etc.)
    
    class Meta:
        ordering = ['document', 'chunk_index']
        
    def __str__(self):
        return f"Chunk {self.chunk_index} of {self.document}"

class AssignmentDraft(models.Model):
    """
    Stores drafts generated by AI for assignments.
    Includes both AI-generated content and user-edited content.
    """
    assignment = models.ForeignKey(Assignment, on_delete=models.CASCADE, related_name='drafts')
    ai_generated_content = models.TextField()  # Original AI-generated text
    user_edited_content = models.TextField(null=True, blank=True)  # User's edited version
    final_content_for_submission = models.TextField(null=True, blank=True)  # Content used for submission
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    is_final = models.BooleanField(default=False)  # Whether this is the final approved version
    submitted = models.BooleanField(default=False)  # Whether this was submitted to Classroom
    submission_timestamp = models.DateTimeField(null=True, blank=True)
    
    # Track which chunks were used in generation
    relevant_chunks = models.ManyToManyField(Chunk, blank=True, related_name='used_in_drafts')
    
    # Used prompt for future reference/debugging
    prompt_used = models.TextField(null=True, blank=True) 
    
    def __str__(self):
        return f"Draft for {self.assignment.title} ({'Final' if self.is_final else 'Draft'})"