from django.db import models
from django.utils import timezone
from django.contrib.auth import get_user_model
from django.core.serializers.json import DjangoJSONEncoder

User = get_user_model()

class AgentTask(models.Model):
    """
    Model representing a task processed by the AI agent.
    """
    TASK_TYPE_CHOICES = [
        ('email_draft', 'Email Draft'),
        ('web_search', 'Web Search'),
        ('weather', 'Weather Information'),
        ('question', 'General Question'),
    ]
    
    STATUS_CHOICES = [
        ('pending', 'Pending'),
        ('processing', 'Processing'),
        ('completed', 'Completed'),
        ('failed', 'Failed'),
    ]
    
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='agent_tasks')
    task_type = models.CharField(max_length=50, choices=TASK_TYPE_CHOICES)
    prompt = models.TextField()
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')
    response = models.TextField(blank=True, null=True)
    metadata = models.JSONField(encoder=DjangoJSONEncoder, default=dict, blank=True)
    created_at = models.DateTimeField(default=timezone.now)
    updated_at = models.DateTimeField(auto_now=True)
    completed_at = models.DateTimeField(null=True, blank=True)
    
    def __str__(self):
        return f"{self.task_type} - {self.status} ({self.user.username})"


class EmailDraft(models.Model):
    """
    Model representing an email draft generated by the AI agent.
    """
    STATUS_CHOICES = [
        ('draft', 'Draft'),
        ('ready', 'Ready to Send'),
        ('sent', 'Sent'),
        ('failed', 'Failed to Send'),
    ]
    
    agent_task = models.ForeignKey(AgentTask, on_delete=models.CASCADE, related_name='email_drafts')
    subject = models.CharField(max_length=255)
    to_recipients = models.TextField()  # Store as comma-separated list
    cc_recipients = models.TextField(blank=True)  # Store as comma-separated list
    bcc_recipients = models.TextField(blank=True)  # Store as comma-separated list
    ai_generated_content = models.TextField()
    user_edited_content = models.TextField(blank=True)
    final_content = models.TextField(blank=True)  # Content actually sent
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='draft')
    created_at = models.DateTimeField(default=timezone.now)
    updated_at = models.DateTimeField(auto_now=True)
    sent_at = models.DateTimeField(null=True, blank=True)
    gmail_message_id = models.CharField(max_length=255, blank=True)  # ID from Gmail API after sending
    
    def __str__(self):
        return f"Email: {self.subject} ({self.status})"


class SearchResult(models.Model):
    """
    Model representing a single search result from a web search task.
    """
    agent_task = models.ForeignKey(AgentTask, on_delete=models.CASCADE, related_name='search_results')
    title = models.CharField(max_length=255)
    snippet = models.TextField()
    url = models.URLField(max_length=2048)  # Long URLs can exist
    position = models.PositiveIntegerField()  # Order in search results
    created_at = models.DateTimeField(default=timezone.now)
    
    def __str__(self):
        return f"Search Result: {self.title[:30]}"
    
    class Meta:
        ordering = ['position']
