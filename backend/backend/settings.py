"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
import json
import dj_database_url # Import dj-database-url
from dotenv import load_dotenv # Import python-dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file
load_dotenv(BASE_DIR.parent / '.env') # Load .env from the project root

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'django-insecure-default-key-for-dev') # Load from env

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG', 'True') == 'True' # Load from env

ALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third-party apps
    'rest_framework',
    'rest_framework.authtoken', # Use DRF Token Auth
    'corsheaders', # For allowing React frontend requests
    'django_celery_results', # To store Celery task results in the DB

    # Local apps
    'users.apps.UsersConfig',
    'classroom_integration.apps.ClassroomIntegrationConfig',
    'ai_processing.apps.AiProcessingConfig',
    'aiAgent.apps.AiagentConfig', # Renamed from agent_services? Keep consistent.
    # 'core.apps.CoreConfig', # Add core app if created
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware', # Add CorsMiddleware
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
# Use dj-database-url to parse DATABASE_URL from environment variable
DATABASES = {
    'default': dj_database_url.config(
        default=f"sqlite:///{BASE_DIR / 'db.sqlite3'}", # Fallback to SQLite for local dev if DATABASE_URL not set
        conn_max_age=600 # Optional: connection pooling
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]



REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # Use TokenAuthentication for API requests from frontend/clients
        'rest_framework.authentication.TokenAuthentication',
        # SessionAuthentication can be kept for browsable API access if desired
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated', # Default to requiring authentication
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}

# CORS Settings
CORS_ALLOWED_ORIGINS = os.getenv('CORS_ALLOWED_ORIGINS', 'http://localhost:3000,http://127.0.0.1:3000').split(',')
CORS_ALLOW_CREDENTIALS = True # Allow cookies if using SessionAuth alongside TokenAuth

# Google OAuth Credentials (Loaded from environment variables)
GOOGLE_CLIENT_ID = os.getenv('GOOGLE_CLIENT_ID')
GOOGLE_CLIENT_SECRET = os.getenv('GOOGLE_CLIENT_SECRET')
# Ensure this matches exactly what's in Google Cloud Console AND the callback view URL
GOOGLE_REDIRECT_URI = os.getenv('GOOGLE_REDIRECT_URI', 'http://127.0.0.1:8000/api/auth/google/callback/')
GOOGLE_SCOPES = [
    'https://www.googleapis.com/auth/userinfo.email',
    'https://www.googleapis.com/auth/userinfo.profile',
    'openid',
    'https://www.googleapis.com/auth/classroom.courses.readonly',
    'https://www.googleapis.com/auth/classroom.coursework.me', # Fetch assignments
    'https://www.googleapis.com/auth/classroom.coursework.students', # Submit assignments
    'https://www.googleapis.com/auth/classroom.announcements.readonly', # If needed
    'https://www.googleapis.com/auth/drive.readonly', # To download materials
    # Add Gmail scope if email agent is implemented
    # 'https://www.googleapis.com/auth/gmail.send',
]

# Gemini API Key (Loaded from environment variable)
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Custom User model
AUTH_USER_MODEL = 'users.User'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
# Add STATIC_ROOT for collectstatic in production
# STATIC_ROOT = BASE_DIR / 'staticfiles'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



# Celery Configuration
# Use memory broker for local development if Redis is not available
CELERY_BROKER_URL = os.getenv('REDIS_URL', 'memory://') # Changed from redis://redis:6379/0
CELERY_RESULT_BACKEND = 'django-db' # Store results in Django DB via django-celery-results
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE # Use Django's timezone
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler' # If using scheduled tasks

# AI Processing Configuration
# Define a path for storing FAISS index and other temporary AI files
AI_DATA_PATH = BASE_DIR / 'ai_data'
FAISS_INDEX_PATH = AI_DATA_PATH / 'faiss_indices'
os.makedirs(FAISS_INDEX_PATH, exist_ok=True) # Ensure the directory exists

# Logging Configuration (Optional but recommended)
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO', # Adjust level as needed (DEBUG, INFO, WARNING, ERROR)
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
        # Add loggers for your specific apps
        'users': {'handlers': ['console'], 'level': 'DEBUG', 'propagate': True},
        'classroom_integration': {'handlers': ['console'], 'level': 'DEBUG', 'propagate': True},
        'ai_processing': {'handlers': ['console'], 'level': 'DEBUG', 'propagate': True},
        'aiAgent': {'handlers': ['console'], 'level': 'DEBUG', 'propagate': True},
    },
}

# Remove the old way of loading credentials from JSON file
# CREDENTIALS_FILE = r'c:/Users/openc/liveStream/credentials.json'
# with open(CREDENTIALS_FILE, 'r', encoding='utf-8') as f:
#     creds = json.load(f)
# GOOGLE_CLIENT_ID = creds['web']['client_id']
# GOOGLE_CLIENT_SECRET = creds['web']['client_secret']
# GOOGLE_REDIRECT_URI = creds['web']['redirect_uris'][0]